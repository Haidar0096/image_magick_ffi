// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/image_magick_ffi.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class ImageMagickFfiBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ImageMagickFfiBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ImageMagickFfiBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void resize(
    ffi.Pointer<ffi.Char> inputFilePath,
    ffi.Pointer<ffi.Char> outputFilePath,
    int width,
    int height,
    ffi.Pointer<ffi.Char> errorOut,
    int maxErrorOutSize,
  ) {
    return _resize(
      inputFilePath,
      outputFilePath,
      width,
      height,
      errorOut,
      maxErrorOutSize,
    );
  }

  late final _resizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('resize');
  late final _resize = _resizePtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int,
          ffi.Pointer<ffi.Char>, int)>();
}
