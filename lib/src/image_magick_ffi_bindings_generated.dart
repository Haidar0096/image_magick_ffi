// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/image_magick_ffi.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class ImageMagickFfiBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ImageMagickFfiBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ImageMagickFfiBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void clearMagickWand(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _clearMagickWand(
      wand,
    );
  }

  late final _clearMagickWandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'clearMagickWand');
  late final _clearMagickWand =
      _clearMagickWandPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> cloneMagickWand(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _cloneMagickWand(
      wand,
    );
  }

  late final _cloneMagickWandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('cloneMagickWand');
  late final _cloneMagickWand = _cloneMagickWandPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> destroyMagickWand(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _destroyMagickWand(
      wand,
    );
  }

  late final _destroyMagickWandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('destroyMagickWand');
  late final _destroyMagickWand = _destroyMagickWandPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  bool isMagickWand(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _isMagickWand(
      wand,
    );
  }

  late final _isMagickWandPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'isMagickWand');
  late final _isMagickWand =
      _isMagickWandPtr.asFunction<bool Function(ffi.Pointer<ffi.Void>)>();

  bool magickClearException(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickClearException(
      wand,
    );
  }

  late final _magickClearExceptionPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'magickClearException');
  late final _magickClearException = _magickClearExceptionPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> magickGetException(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Int> severity,
  ) {
    return _magickGetException(
      wand,
      severity,
    );
  }

  late final _magickGetExceptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>)>>('magickGetException');
  late final _magickGetException = _magickGetExceptionPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>)>();

  int magickGetExceptionType(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickGetExceptionType(
      wand,
    );
  }

  late final _magickGetExceptionTypePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'magickGetExceptionType');
  late final _magickGetExceptionType = _magickGetExceptionTypePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int magickGetIteratorIndex(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickGetIteratorIndex(
      wand,
    );
  }

  late final _magickGetIteratorIndexPtr =
      _lookup<ffi.NativeFunction<ssize_t Function(ffi.Pointer<ffi.Void>)>>(
          'magickGetIteratorIndex');
  late final _magickGetIteratorIndex = _magickGetIteratorIndexPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> magickQueryConfigureOption(
    ffi.Pointer<ffi.Char> option,
  ) {
    return _magickQueryConfigureOption(
      option,
    );
  }

  late final _magickQueryConfigureOptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('magickQueryConfigureOption');
  late final _magickQueryConfigureOption = _magickQueryConfigureOptionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> magickQueryConfigureOptions(
    ffi.Pointer<ffi.Char> pattern,
    ffi.Pointer<ffi.Size> number_options,
  ) {
    return _magickQueryConfigureOptions(
      pattern,
      number_options,
    );
  }

  late final _magickQueryConfigureOptionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('magickQueryConfigureOptions');
  late final _magickQueryConfigureOptions =
      _magickQueryConfigureOptionsPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Double> magickQueryFontMetrics(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Void> drawing_wand,
    ffi.Pointer<ffi.Char> text,
  ) {
    return _magickQueryFontMetrics(
      wand,
      drawing_wand,
      text,
    );
  }

  late final _magickQueryFontMetricsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Double> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('magickQueryFontMetrics');
  late final _magickQueryFontMetrics = _magickQueryFontMetricsPtr.asFunction<
      ffi.Pointer<ffi.Double> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Double> magickQueryMultilineFontMetrics(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Void> drawing_wand,
    ffi.Pointer<ffi.Char> text,
  ) {
    return _magickQueryMultilineFontMetrics(
      wand,
      drawing_wand,
      text,
    );
  }

  late final _magickQueryMultilineFontMetricsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Double> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('magickQueryMultilineFontMetrics');
  late final _magickQueryMultilineFontMetrics =
      _magickQueryMultilineFontMetricsPtr.asFunction<
          ffi.Pointer<ffi.Double> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> magickQueryFonts(
    ffi.Pointer<ffi.Char> pattern,
    ffi.Pointer<ffi.Size> number_fonts,
  ) {
    return _magickQueryFonts(
      pattern,
      number_fonts,
    );
  }

  late final _magickQueryFontsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('magickQueryFonts');
  late final _magickQueryFonts = _magickQueryFontsPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> magickQueryFormats(
    ffi.Pointer<ffi.Char> pattern,
    ffi.Pointer<ffi.Size> number_formats,
  ) {
    return _magickQueryFormats(
      pattern,
      number_formats,
    );
  }

  late final _magickQueryFormatsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('magickQueryFormats');
  late final _magickQueryFormats = _magickQueryFormatsPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Void> magickRelinquishMemory(
    ffi.Pointer<ffi.Void> resource,
  ) {
    return _magickRelinquishMemory(
      resource,
    );
  }

  late final _magickRelinquishMemoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('magickRelinquishMemory');
  late final _magickRelinquishMemory = _magickRelinquishMemoryPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void magickResetIterator(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickResetIterator(
      wand,
    );
  }

  late final _magickResetIteratorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'magickResetIterator');
  late final _magickResetIterator = _magickResetIteratorPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void magickSetFirstIterator(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickSetFirstIterator(
      wand,
    );
  }

  late final _magickSetFirstIteratorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'magickSetFirstIterator');
  late final _magickSetFirstIterator = _magickSetFirstIteratorPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  bool magickSetIteratorIndex(
    ffi.Pointer<ffi.Void> wand,
    int index,
  ) {
    return _magickSetIteratorIndex(
      wand,
      index,
    );
  }

  late final _magickSetIteratorIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Void>, ssize_t)>>('magickSetIteratorIndex');
  late final _magickSetIteratorIndex = _magickSetIteratorIndexPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>, int)>();

  void magickSetLastIterator(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickSetLastIterator(
      wand,
    );
  }

  late final _magickSetLastIteratorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'magickSetLastIterator');
  late final _magickSetLastIterator = _magickSetLastIteratorPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void magickWandGenesis() {
    return _magickWandGenesis();
  }

  late final _magickWandGenesisPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('magickWandGenesis');
  late final _magickWandGenesis =
      _magickWandGenesisPtr.asFunction<void Function()>();

  void magickWandTerminus() {
    return _magickWandTerminus();
  }

  late final _magickWandTerminusPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('magickWandTerminus');
  late final _magickWandTerminus =
      _magickWandTerminusPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Void> newMagickWand() {
    return _newMagickWand();
  }

  late final _newMagickWandPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
          'newMagickWand');
  late final _newMagickWand =
      _newMagickWandPtr.asFunction<ffi.Pointer<ffi.Void> Function()>();

  ffi.Pointer<ffi.Void> newMagickWandFromImage(
    ffi.Pointer<ffi.Void> image,
  ) {
    return _newMagickWandFromImage(
      image,
    );
  }

  late final _newMagickWandFromImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('newMagickWandFromImage');
  late final _newMagickWandFromImage = _newMagickWandFromImagePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  bool isMagickWandInstantiated() {
    return _isMagickWandInstantiated();
  }

  late final _isMagickWandInstantiatedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'isMagickWandInstantiated');
  late final _isMagickWandInstantiated =
      _isMagickWandInstantiatedPtr.asFunction<bool Function()>();

  bool magickDeleteImageArtifact(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> artifact,
  ) {
    return _magickDeleteImageArtifact(
      wand,
      artifact,
    );
  }

  late final _magickDeleteImageArtifactPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('magickDeleteImageArtifact');
  late final _magickDeleteImageArtifact =
      _magickDeleteImageArtifactPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  bool magickDeleteImageProperty(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> property,
  ) {
    return _magickDeleteImageProperty(
      wand,
      property,
    );
  }

  late final _magickDeleteImagePropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('magickDeleteImageProperty');
  late final _magickDeleteImageProperty =
      _magickDeleteImagePropertyPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  bool magickDeleteOption(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> option,
  ) {
    return _magickDeleteOption(
      wand,
      option,
    );
  }

  late final _magickDeleteOptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('magickDeleteOption');
  late final _magickDeleteOption = _magickDeleteOptionPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  bool magickGetAntialias(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickGetAntialias(
      wand,
    );
  }

  late final _magickGetAntialiasPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'magickGetAntialias');
  late final _magickGetAntialias =
      _magickGetAntialiasPtr.asFunction<bool Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> magickGetBackgroundColor(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickGetBackgroundColor(
      wand,
    );
  }

  late final _magickGetBackgroundColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('magickGetBackgroundColor');
  late final _magickGetBackgroundColor = _magickGetBackgroundColorPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  int magickGetColorspace(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickGetColorspace(
      wand,
    );
  }

  late final _magickGetColorspacePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'magickGetColorspace');
  late final _magickGetColorspace =
      _magickGetColorspacePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int magickGetCompression(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickGetCompression(
      wand,
    );
  }

  late final _magickGetCompressionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'magickGetCompression');
  late final _magickGetCompression = _magickGetCompressionPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int magickGetCompressionQuality(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickGetCompressionQuality(
      wand,
    );
  }

  late final _magickGetCompressionQualityPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Void>)>>(
          'magickGetCompressionQuality');
  late final _magickGetCompressionQuality = _magickGetCompressionQualityPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> magickGetCopyright() {
    return _magickGetCopyright();
  }

  late final _magickGetCopyrightPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'magickGetCopyright');
  late final _magickGetCopyright =
      _magickGetCopyrightPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> magickGetFilename(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickGetFilename(
      wand,
    );
  }

  late final _magickGetFilenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('magickGetFilename');
  late final _magickGetFilename = _magickGetFilenamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> magickGetFont(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickGetFont(
      wand,
    );
  }

  late final _magickGetFontPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('magickGetFont');
  late final _magickGetFont = _magickGetFontPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> magickGetFormat(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickGetFormat(
      wand,
    );
  }

  late final _magickGetFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('magickGetFormat');
  late final _magickGetFormat = _magickGetFormatPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  int magickGetGravity(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickGetGravity(
      wand,
    );
  }

  late final _magickGetGravityPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'magickGetGravity');
  late final _magickGetGravity =
      _magickGetGravityPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> magickGetHomeURL() {
    return _magickGetHomeURL();
  }

  late final _magickGetHomeURLPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'magickGetHomeURL');
  late final _magickGetHomeURL =
      _magickGetHomeURLPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> magickGetImageArtifact(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> artifact,
  ) {
    return _magickGetImageArtifact(
      wand,
      artifact,
    );
  }

  late final _magickGetImageArtifactPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('magickGetImageArtifact');
  late final _magickGetImageArtifact = _magickGetImageArtifactPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> magickGetImageArtifacts(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> pattern,
    ffi.Pointer<ffi.Size> number_artifacts,
  ) {
    return _magickGetImageArtifacts(
      wand,
      pattern,
      number_artifacts,
    );
  }

  late final _magickGetImageArtifactsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('magickGetImageArtifacts');
  late final _magickGetImageArtifacts = _magickGetImageArtifactsPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.UnsignedChar> magickGetImageProfile(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Size> length,
  ) {
    return _magickGetImageProfile(
      wand,
      name,
      length,
    );
  }

  late final _magickGetImageProfilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('magickGetImageProfile');
  late final _magickGetImageProfile = _magickGetImageProfilePtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> magickGetImageProfiles(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> pattern,
    ffi.Pointer<ffi.Size> number_profiles,
  ) {
    return _magickGetImageProfiles(
      wand,
      pattern,
      number_profiles,
    );
  }

  late final _magickGetImageProfilesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('magickGetImageProfiles');
  late final _magickGetImageProfiles = _magickGetImageProfilesPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Char> magickGetImageProperty(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> property,
  ) {
    return _magickGetImageProperty(
      wand,
      property,
    );
  }

  late final _magickGetImagePropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('magickGetImageProperty');
  late final _magickGetImageProperty = _magickGetImagePropertyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> magickGetImageProperties(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> pattern,
    ffi.Pointer<ffi.Size> number_properties,
  ) {
    return _magickGetImageProperties(
      wand,
      pattern,
      number_properties,
    );
  }

  late final _magickGetImagePropertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('magickGetImageProperties');
  late final _magickGetImageProperties =
      _magickGetImagePropertiesPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  int magickGetInterlaceScheme(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickGetInterlaceScheme(
      wand,
    );
  }

  late final _magickGetInterlaceSchemePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'magickGetInterlaceScheme');
  late final _magickGetInterlaceScheme = _magickGetInterlaceSchemePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int magickGetInterpolateMethod(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickGetInterpolateMethod(
      wand,
    );
  }

  late final _magickGetInterpolateMethodPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'magickGetInterpolateMethod');
  late final _magickGetInterpolateMethod = _magickGetInterpolateMethodPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> magickGetOption(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _magickGetOption(
      wand,
      key,
    );
  }

  late final _magickGetOptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('magickGetOption');
  late final _magickGetOption = _magickGetOptionPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> magickGetOptions(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> pattern,
    ffi.Pointer<ffi.Size> number_options,
  ) {
    return _magickGetOptions(
      wand,
      pattern,
      number_options,
    );
  }

  late final _magickGetOptionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('magickGetOptions');
  late final _magickGetOptions = _magickGetOptionsPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  int magickGetOrientation(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickGetOrientation(
      wand,
    );
  }

  late final _magickGetOrientationPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'magickGetOrientation');
  late final _magickGetOrientation = _magickGetOrientationPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> magickGetPackageName() {
    return _magickGetPackageName();
  }

  late final _magickGetPackageNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'magickGetPackageName');
  late final _magickGetPackageName =
      _magickGetPackageNamePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  bool magickGetPage(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Size> width,
    ffi.Pointer<ffi.Size> height,
    ffi.Pointer<ssize_t> x,
    ffi.Pointer<ssize_t> y,
  ) {
    return _magickGetPage(
      wand,
      width,
      height,
      x,
      y,
    );
  }

  late final _magickGetPagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ssize_t>,
              ffi.Pointer<ssize_t>)>>('magickGetPage');
  late final _magickGetPage = _magickGetPagePtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ssize_t>, ffi.Pointer<ssize_t>)>();

  double magickGetPointsize(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickGetPointsize(
      wand,
    );
  }

  late final _magickGetPointsizePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Void>)>>(
          'magickGetPointsize');
  late final _magickGetPointsize = _magickGetPointsizePtr
      .asFunction<double Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> magickGetQuantumDepth(
    ffi.Pointer<ffi.Size> depth,
  ) {
    return _magickGetQuantumDepth(
      depth,
    );
  }

  late final _magickGetQuantumDepthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Size>)>>('magickGetQuantumDepth');
  late final _magickGetQuantumDepth = _magickGetQuantumDepthPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Char> magickGetQuantumRange(
    ffi.Pointer<ffi.Size> range,
  ) {
    return _magickGetQuantumRange(
      range,
    );
  }

  late final _magickGetQuantumRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Size>)>>('magickGetQuantumRange');
  late final _magickGetQuantumRange = _magickGetQuantumRangePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Char> magickGetReleaseDate() {
    return _magickGetReleaseDate();
  }

  late final _magickGetReleaseDatePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'magickGetReleaseDate');
  late final _magickGetReleaseDate =
      _magickGetReleaseDatePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  bool magickGetResolution(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Double> x,
    ffi.Pointer<ffi.Double> y,
  ) {
    return _magickGetResolution(
      wand,
      x,
      y,
    );
  }

  late final _magickGetResolutionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('magickGetResolution');
  late final _magickGetResolution = _magickGetResolutionPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int magickGetResource(
    int type,
  ) {
    return _magickGetResource(
      type,
    );
  }

  late final _magickGetResourcePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLongLong Function(ffi.Int)>>(
          'magickGetResource');
  late final _magickGetResource =
      _magickGetResourcePtr.asFunction<int Function(int)>();

  int magickGetResourceLimit(
    int type,
  ) {
    return _magickGetResourceLimit(
      type,
    );
  }

  late final _magickGetResourceLimitPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLongLong Function(ffi.Int)>>(
          'magickGetResourceLimit');
  late final _magickGetResourceLimit =
      _magickGetResourceLimitPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Double> magickGetSamplingFactors(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Size> number_factors,
  ) {
    return _magickGetSamplingFactors(
      wand,
      number_factors,
    );
  }

  late final _magickGetSamplingFactorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Double> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('magickGetSamplingFactors');
  late final _magickGetSamplingFactors =
      _magickGetSamplingFactorsPtr.asFunction<
          ffi.Pointer<ffi.Double> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>();

  bool magickGetSize(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Size> columns,
    ffi.Pointer<ffi.Size> rows,
  ) {
    return _magickGetSize(
      wand,
      columns,
      rows,
    );
  }

  late final _magickGetSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>)>>('magickGetSize');
  late final _magickGetSize = _magickGetSizePtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>)>();

  /// TODO: complete adding the other methods
  bool magickReadImage(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _magickReadImage(
      wand,
      filename,
    );
  }

  late final _magickReadImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('magickReadImage');
  late final _magickReadImage = _magickReadImagePtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  bool magickWriteImage(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _magickWriteImage(
      wand,
      filename,
    );
  }

  late final _magickWriteImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('magickWriteImage');
  late final _magickWriteImage = _magickWriteImagePtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();
}

typedef ssize_t = ffi.LongLong;
