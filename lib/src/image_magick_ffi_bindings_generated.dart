// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/image_magick_ffi.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class ImageMagickFfiBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ImageMagickFfiBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ImageMagickFfiBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// ############################################ Dart Sdk Api ############################################
  int initDartAPI(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _initDartAPI(
      data,
    );
  }

  late final _initDartAPIPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'initDartAPI');
  late final _initDartAPI =
      _initDartAPIPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// ############################################ Dart Sdk Api ############################################
  void clearMagickWand(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _clearMagickWand(
      wand,
    );
  }

  late final _clearMagickWandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'clearMagickWand');
  late final _clearMagickWand =
      _clearMagickWandPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> cloneMagickWand(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _cloneMagickWand(
      wand,
    );
  }

  late final _cloneMagickWandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('cloneMagickWand');
  late final _cloneMagickWand = _cloneMagickWandPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> destroyMagickWand(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _destroyMagickWand(
      wand,
    );
  }

  late final _destroyMagickWandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('destroyMagickWand');
  late final _destroyMagickWand = _destroyMagickWandPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  bool isMagickWand(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _isMagickWand(
      wand,
    );
  }

  late final _isMagickWandPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'isMagickWand');
  late final _isMagickWand =
      _isMagickWandPtr.asFunction<bool Function(ffi.Pointer<ffi.Void>)>();

  bool magickClearException(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickClearException(
      wand,
    );
  }

  late final _magickClearExceptionPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'magickClearException');
  late final _magickClearException = _magickClearExceptionPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> magickGetException(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Int> severity,
  ) {
    return _magickGetException(
      wand,
      severity,
    );
  }

  late final _magickGetExceptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>)>>('magickGetException');
  late final _magickGetException = _magickGetExceptionPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>)>();

  int magickGetExceptionType(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickGetExceptionType(
      wand,
    );
  }

  late final _magickGetExceptionTypePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'magickGetExceptionType');
  late final _magickGetExceptionType = _magickGetExceptionTypePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int magickGetIteratorIndex(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickGetIteratorIndex(
      wand,
    );
  }

  late final _magickGetIteratorIndexPtr =
      _lookup<ffi.NativeFunction<ssize_t Function(ffi.Pointer<ffi.Void>)>>(
          'magickGetIteratorIndex');
  late final _magickGetIteratorIndex = _magickGetIteratorIndexPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> magickQueryConfigureOption(
    ffi.Pointer<ffi.Char> option,
  ) {
    return _magickQueryConfigureOption(
      option,
    );
  }

  late final _magickQueryConfigureOptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('magickQueryConfigureOption');
  late final _magickQueryConfigureOption = _magickQueryConfigureOptionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> magickQueryConfigureOptions(
    ffi.Pointer<ffi.Char> pattern,
    ffi.Pointer<ffi.Size> number_options,
  ) {
    return _magickQueryConfigureOptions(
      pattern,
      number_options,
    );
  }

  late final _magickQueryConfigureOptionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('magickQueryConfigureOptions');
  late final _magickQueryConfigureOptions =
      _magickQueryConfigureOptionsPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Double> magickQueryFontMetrics(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Void> drawing_wand,
    ffi.Pointer<ffi.Char> text,
  ) {
    return _magickQueryFontMetrics(
      wand,
      drawing_wand,
      text,
    );
  }

  late final _magickQueryFontMetricsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Double> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('magickQueryFontMetrics');
  late final _magickQueryFontMetrics = _magickQueryFontMetricsPtr.asFunction<
      ffi.Pointer<ffi.Double> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Double> magickQueryMultilineFontMetrics(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Void> drawing_wand,
    ffi.Pointer<ffi.Char> text,
  ) {
    return _magickQueryMultilineFontMetrics(
      wand,
      drawing_wand,
      text,
    );
  }

  late final _magickQueryMultilineFontMetricsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Double> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('magickQueryMultilineFontMetrics');
  late final _magickQueryMultilineFontMetrics =
      _magickQueryMultilineFontMetricsPtr.asFunction<
          ffi.Pointer<ffi.Double> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> magickQueryFonts(
    ffi.Pointer<ffi.Char> pattern,
    ffi.Pointer<ffi.Size> number_fonts,
  ) {
    return _magickQueryFonts(
      pattern,
      number_fonts,
    );
  }

  late final _magickQueryFontsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('magickQueryFonts');
  late final _magickQueryFonts = _magickQueryFontsPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> magickQueryFormats(
    ffi.Pointer<ffi.Char> pattern,
    ffi.Pointer<ffi.Size> number_formats,
  ) {
    return _magickQueryFormats(
      pattern,
      number_formats,
    );
  }

  late final _magickQueryFormatsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('magickQueryFormats');
  late final _magickQueryFormats = _magickQueryFormatsPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Void> magickRelinquishMemory(
    ffi.Pointer<ffi.Void> resource,
  ) {
    return _magickRelinquishMemory(
      resource,
    );
  }

  late final _magickRelinquishMemoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('magickRelinquishMemory');
  late final _magickRelinquishMemory = _magickRelinquishMemoryPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void magickResetIterator(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickResetIterator(
      wand,
    );
  }

  late final _magickResetIteratorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'magickResetIterator');
  late final _magickResetIterator = _magickResetIteratorPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void magickSetFirstIterator(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickSetFirstIterator(
      wand,
    );
  }

  late final _magickSetFirstIteratorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'magickSetFirstIterator');
  late final _magickSetFirstIterator = _magickSetFirstIteratorPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  bool magickSetIteratorIndex(
    ffi.Pointer<ffi.Void> wand,
    int index,
  ) {
    return _magickSetIteratorIndex(
      wand,
      index,
    );
  }

  late final _magickSetIteratorIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Void>, ssize_t)>>('magickSetIteratorIndex');
  late final _magickSetIteratorIndex = _magickSetIteratorIndexPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>, int)>();

  void magickSetLastIterator(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickSetLastIterator(
      wand,
    );
  }

  late final _magickSetLastIteratorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'magickSetLastIterator');
  late final _magickSetLastIterator = _magickSetLastIteratorPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void magickWandGenesis() {
    return _magickWandGenesis();
  }

  late final _magickWandGenesisPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('magickWandGenesis');
  late final _magickWandGenesis =
      _magickWandGenesisPtr.asFunction<void Function()>();

  void magickWandTerminus() {
    return _magickWandTerminus();
  }

  late final _magickWandTerminusPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('magickWandTerminus');
  late final _magickWandTerminus =
      _magickWandTerminusPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Void> newMagickWand() {
    return _newMagickWand();
  }

  late final _newMagickWandPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
          'newMagickWand');
  late final _newMagickWand =
      _newMagickWandPtr.asFunction<ffi.Pointer<ffi.Void> Function()>();

  ffi.Pointer<ffi.Void> newMagickWandFromImage(
    ffi.Pointer<ffi.Void> image,
  ) {
    return _newMagickWandFromImage(
      image,
    );
  }

  late final _newMagickWandFromImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('newMagickWandFromImage');
  late final _newMagickWandFromImage = _newMagickWandFromImagePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  bool isMagickWandInstantiated() {
    return _isMagickWandInstantiated();
  }

  late final _isMagickWandInstantiatedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'isMagickWandInstantiated');
  late final _isMagickWandInstantiated =
      _isMagickWandInstantiatedPtr.asFunction<bool Function()>();

  bool magickDeleteImageArtifact(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> artifact,
  ) {
    return _magickDeleteImageArtifact(
      wand,
      artifact,
    );
  }

  late final _magickDeleteImageArtifactPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('magickDeleteImageArtifact');
  late final _magickDeleteImageArtifact =
      _magickDeleteImageArtifactPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  bool magickDeleteImageProperty(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> property,
  ) {
    return _magickDeleteImageProperty(
      wand,
      property,
    );
  }

  late final _magickDeleteImagePropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('magickDeleteImageProperty');
  late final _magickDeleteImageProperty =
      _magickDeleteImagePropertyPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  bool magickDeleteOption(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> option,
  ) {
    return _magickDeleteOption(
      wand,
      option,
    );
  }

  late final _magickDeleteOptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('magickDeleteOption');
  late final _magickDeleteOption = _magickDeleteOptionPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  bool magickGetAntialias(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickGetAntialias(
      wand,
    );
  }

  late final _magickGetAntialiasPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'magickGetAntialias');
  late final _magickGetAntialias =
      _magickGetAntialiasPtr.asFunction<bool Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> magickGetBackgroundColor(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickGetBackgroundColor(
      wand,
    );
  }

  late final _magickGetBackgroundColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('magickGetBackgroundColor');
  late final _magickGetBackgroundColor = _magickGetBackgroundColorPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  int magickGetColorspace(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickGetColorspace(
      wand,
    );
  }

  late final _magickGetColorspacePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'magickGetColorspace');
  late final _magickGetColorspace =
      _magickGetColorspacePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int magickGetCompression(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickGetCompression(
      wand,
    );
  }

  late final _magickGetCompressionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'magickGetCompression');
  late final _magickGetCompression = _magickGetCompressionPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int magickGetCompressionQuality(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickGetCompressionQuality(
      wand,
    );
  }

  late final _magickGetCompressionQualityPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Void>)>>(
          'magickGetCompressionQuality');
  late final _magickGetCompressionQuality = _magickGetCompressionQualityPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> magickGetCopyright() {
    return _magickGetCopyright();
  }

  late final _magickGetCopyrightPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'magickGetCopyright');
  late final _magickGetCopyright =
      _magickGetCopyrightPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> magickGetFilename(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickGetFilename(
      wand,
    );
  }

  late final _magickGetFilenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('magickGetFilename');
  late final _magickGetFilename = _magickGetFilenamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> magickGetFont(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickGetFont(
      wand,
    );
  }

  late final _magickGetFontPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('magickGetFont');
  late final _magickGetFont = _magickGetFontPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> magickGetFormat(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickGetFormat(
      wand,
    );
  }

  late final _magickGetFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('magickGetFormat');
  late final _magickGetFormat = _magickGetFormatPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  int magickGetGravity(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickGetGravity(
      wand,
    );
  }

  late final _magickGetGravityPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'magickGetGravity');
  late final _magickGetGravity =
      _magickGetGravityPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> magickGetHomeURL() {
    return _magickGetHomeURL();
  }

  late final _magickGetHomeURLPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'magickGetHomeURL');
  late final _magickGetHomeURL =
      _magickGetHomeURLPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> magickGetImageArtifact(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> artifact,
  ) {
    return _magickGetImageArtifact(
      wand,
      artifact,
    );
  }

  late final _magickGetImageArtifactPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('magickGetImageArtifact');
  late final _magickGetImageArtifact = _magickGetImageArtifactPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> magickGetImageArtifacts(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> pattern,
    ffi.Pointer<ffi.Size> number_artifacts,
  ) {
    return _magickGetImageArtifacts(
      wand,
      pattern,
      number_artifacts,
    );
  }

  late final _magickGetImageArtifactsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('magickGetImageArtifacts');
  late final _magickGetImageArtifacts = _magickGetImageArtifactsPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.UnsignedChar> magickGetImageProfile(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Size> length,
  ) {
    return _magickGetImageProfile(
      wand,
      name,
      length,
    );
  }

  late final _magickGetImageProfilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('magickGetImageProfile');
  late final _magickGetImageProfile = _magickGetImageProfilePtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> magickGetImageProfiles(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> pattern,
    ffi.Pointer<ffi.Size> number_profiles,
  ) {
    return _magickGetImageProfiles(
      wand,
      pattern,
      number_profiles,
    );
  }

  late final _magickGetImageProfilesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('magickGetImageProfiles');
  late final _magickGetImageProfiles = _magickGetImageProfilesPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Char> magickGetImageProperty(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> property,
  ) {
    return _magickGetImageProperty(
      wand,
      property,
    );
  }

  late final _magickGetImagePropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('magickGetImageProperty');
  late final _magickGetImageProperty = _magickGetImagePropertyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> magickGetImageProperties(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> pattern,
    ffi.Pointer<ffi.Size> number_properties,
  ) {
    return _magickGetImageProperties(
      wand,
      pattern,
      number_properties,
    );
  }

  late final _magickGetImagePropertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('magickGetImageProperties');
  late final _magickGetImageProperties =
      _magickGetImagePropertiesPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  int magickGetInterlaceScheme(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickGetInterlaceScheme(
      wand,
    );
  }

  late final _magickGetInterlaceSchemePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'magickGetInterlaceScheme');
  late final _magickGetInterlaceScheme = _magickGetInterlaceSchemePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int magickGetInterpolateMethod(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickGetInterpolateMethod(
      wand,
    );
  }

  late final _magickGetInterpolateMethodPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'magickGetInterpolateMethod');
  late final _magickGetInterpolateMethod = _magickGetInterpolateMethodPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> magickGetOption(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _magickGetOption(
      wand,
      key,
    );
  }

  late final _magickGetOptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('magickGetOption');
  late final _magickGetOption = _magickGetOptionPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> magickGetOptions(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> pattern,
    ffi.Pointer<ffi.Size> number_options,
  ) {
    return _magickGetOptions(
      wand,
      pattern,
      number_options,
    );
  }

  late final _magickGetOptionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('magickGetOptions');
  late final _magickGetOptions = _magickGetOptionsPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  int magickGetOrientation(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickGetOrientation(
      wand,
    );
  }

  late final _magickGetOrientationPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'magickGetOrientation');
  late final _magickGetOrientation = _magickGetOrientationPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> magickGetPackageName() {
    return _magickGetPackageName();
  }

  late final _magickGetPackageNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'magickGetPackageName');
  late final _magickGetPackageName =
      _magickGetPackageNamePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  bool magickGetPage(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Size> width,
    ffi.Pointer<ffi.Size> height,
    ffi.Pointer<ssize_t> x,
    ffi.Pointer<ssize_t> y,
  ) {
    return _magickGetPage(
      wand,
      width,
      height,
      x,
      y,
    );
  }

  late final _magickGetPagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ssize_t>,
              ffi.Pointer<ssize_t>)>>('magickGetPage');
  late final _magickGetPage = _magickGetPagePtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ssize_t>, ffi.Pointer<ssize_t>)>();

  double magickGetPointsize(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickGetPointsize(
      wand,
    );
  }

  late final _magickGetPointsizePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Void>)>>(
          'magickGetPointsize');
  late final _magickGetPointsize = _magickGetPointsizePtr
      .asFunction<double Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> magickGetQuantumDepth(
    ffi.Pointer<ffi.Size> depth,
  ) {
    return _magickGetQuantumDepth(
      depth,
    );
  }

  late final _magickGetQuantumDepthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Size>)>>('magickGetQuantumDepth');
  late final _magickGetQuantumDepth = _magickGetQuantumDepthPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Char> magickGetQuantumRange(
    ffi.Pointer<ffi.Size> range,
  ) {
    return _magickGetQuantumRange(
      range,
    );
  }

  late final _magickGetQuantumRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Size>)>>('magickGetQuantumRange');
  late final _magickGetQuantumRange = _magickGetQuantumRangePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Char> magickGetReleaseDate() {
    return _magickGetReleaseDate();
  }

  late final _magickGetReleaseDatePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'magickGetReleaseDate');
  late final _magickGetReleaseDate =
      _magickGetReleaseDatePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  bool magickGetResolution(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Double> x,
    ffi.Pointer<ffi.Double> y,
  ) {
    return _magickGetResolution(
      wand,
      x,
      y,
    );
  }

  late final _magickGetResolutionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('magickGetResolution');
  late final _magickGetResolution = _magickGetResolutionPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int magickGetResource(
    int type,
  ) {
    return _magickGetResource(
      type,
    );
  }

  late final _magickGetResourcePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLongLong Function(ffi.Int)>>(
          'magickGetResource');
  late final _magickGetResource =
      _magickGetResourcePtr.asFunction<int Function(int)>();

  int magickGetResourceLimit(
    int type,
  ) {
    return _magickGetResourceLimit(
      type,
    );
  }

  late final _magickGetResourceLimitPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLongLong Function(ffi.Int)>>(
          'magickGetResourceLimit');
  late final _magickGetResourceLimit =
      _magickGetResourceLimitPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Double> magickGetSamplingFactors(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Size> number_factors,
  ) {
    return _magickGetSamplingFactors(
      wand,
      number_factors,
    );
  }

  late final _magickGetSamplingFactorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Double> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('magickGetSamplingFactors');
  late final _magickGetSamplingFactors =
      _magickGetSamplingFactorsPtr.asFunction<
          ffi.Pointer<ffi.Double> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>();

  bool magickGetSize(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Size> columns,
    ffi.Pointer<ffi.Size> rows,
  ) {
    return _magickGetSize(
      wand,
      columns,
      rows,
    );
  }

  late final _magickGetSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>)>>('magickGetSize');
  late final _magickGetSize = _magickGetSizePtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>)>();

  bool magickGetSizeOffset(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ssize_t> offset,
  ) {
    return _magickGetSizeOffset(
      wand,
      offset,
    );
  }

  late final _magickGetSizeOffsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ssize_t>)>>('magickGetSizeOffset');
  late final _magickGetSizeOffset = _magickGetSizeOffsetPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ssize_t>)>();

  int magickGetType(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickGetType(
      wand,
    );
  }

  late final _magickGetTypePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'magickGetType');
  late final _magickGetType =
      _magickGetTypePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> magickGetVersion(
    ffi.Pointer<ffi.Size> version,
  ) {
    return _magickGetVersion(
      version,
    );
  }

  late final _magickGetVersionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Size>)>>('magickGetVersion');
  late final _magickGetVersion = _magickGetVersionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Size>)>();

  bool magickProfileImage(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Void> profile,
    int length,
  ) {
    return _magickProfileImage(
      wand,
      name,
      profile,
      length,
    );
  }

  late final _magickProfileImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('magickProfileImage');
  late final _magickProfileImage = _magickProfileImagePtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.UnsignedChar> magickRemoveImageProfile(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Size> length,
  ) {
    return _magickRemoveImageProfile(
      wand,
      name,
      length,
    );
  }

  late final _magickRemoveImageProfilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('magickRemoveImageProfile');
  late final _magickRemoveImageProfile =
      _magickRemoveImageProfilePtr.asFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  bool magickSetAntialias(
    ffi.Pointer<ffi.Void> wand,
    bool antialias,
  ) {
    return _magickSetAntialias(
      wand,
      antialias,
    );
  }

  late final _magickSetAntialiasPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Void>, ffi.Bool)>>('magickSetAntialias');
  late final _magickSetAntialias = _magickSetAntialiasPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>, bool)>();

  bool magickSetBackgroundColor(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Void> background,
  ) {
    return _magickSetBackgroundColor(
      wand,
      background,
    );
  }

  late final _magickSetBackgroundColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('magickSetBackgroundColor');
  late final _magickSetBackgroundColor =
      _magickSetBackgroundColorPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  bool magickSetColorspace(
    ffi.Pointer<ffi.Void> wand,
    int colorspace,
  ) {
    return _magickSetColorspace(
      wand,
      colorspace,
    );
  }

  late final _magickSetColorspacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('magickSetColorspace');
  late final _magickSetColorspace = _magickSetColorspacePtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>, int)>();

  bool magickSetCompression(
    ffi.Pointer<ffi.Void> wand,
    int compression,
  ) {
    return _magickSetCompression(
      wand,
      compression,
    );
  }

  late final _magickSetCompressionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('magickSetCompression');
  late final _magickSetCompression = _magickSetCompressionPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>, int)>();

  bool magickSetCompressionQuality(
    ffi.Pointer<ffi.Void> wand,
    int quality,
  ) {
    return _magickSetCompressionQuality(
      wand,
      quality,
    );
  }

  late final _magickSetCompressionQualityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('magickSetCompressionQuality');
  late final _magickSetCompressionQuality = _magickSetCompressionQualityPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>, int)>();

  bool magickSetDepth(
    ffi.Pointer<ffi.Void> wand,
    int depth,
  ) {
    return _magickSetDepth(
      wand,
      depth,
    );
  }

  late final _magickSetDepthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('magickSetDepth');
  late final _magickSetDepth = _magickSetDepthPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>, int)>();

  bool magickSetExtract(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> geometry,
  ) {
    return _magickSetExtract(
      wand,
      geometry,
    );
  }

  late final _magickSetExtractPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('magickSetExtract');
  late final _magickSetExtract = _magickSetExtractPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  bool magickSetFilename(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _magickSetFilename(
      wand,
      filename,
    );
  }

  late final _magickSetFilenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('magickSetFilename');
  late final _magickSetFilename = _magickSetFilenamePtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  bool magickSetFont(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> font,
  ) {
    return _magickSetFont(
      wand,
      font,
    );
  }

  late final _magickSetFontPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>>('magickSetFont');
  late final _magickSetFont = _magickSetFontPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  bool magickSetFormat(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _magickSetFormat(
      wand,
      format,
    );
  }

  late final _magickSetFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('magickSetFormat');
  late final _magickSetFormat = _magickSetFormatPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  bool magickSetGravity(
    ffi.Pointer<ffi.Void> wand,
    int type,
  ) {
    return _magickSetGravity(
      wand,
      type,
    );
  }

  late final _magickSetGravityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('magickSetGravity');
  late final _magickSetGravity = _magickSetGravityPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>, int)>();

  bool magickSetImageArtifact(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> artifact,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _magickSetImageArtifact(
      wand,
      artifact,
      value,
    );
  }

  late final _magickSetImageArtifactPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('magickSetImageArtifact');
  late final _magickSetImageArtifact = _magickSetImageArtifactPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  bool magickSetImageProfile(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Void> profile,
    int length,
  ) {
    return _magickSetImageProfile(
      wand,
      name,
      profile,
      length,
    );
  }

  late final _magickSetImageProfilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('magickSetImageProfile');
  late final _magickSetImageProfile = _magickSetImageProfilePtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>, int)>();

  bool magickSetImageProperty(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> property,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _magickSetImageProperty(
      wand,
      property,
      value,
    );
  }

  late final _magickSetImagePropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('magickSetImageProperty');
  late final _magickSetImageProperty = _magickSetImagePropertyPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  bool magickSetInterlaceScheme(
    ffi.Pointer<ffi.Void> wand,
    int interlace_scheme,
  ) {
    return _magickSetInterlaceScheme(
      wand,
      interlace_scheme,
    );
  }

  late final _magickSetInterlaceSchemePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('magickSetInterlaceScheme');
  late final _magickSetInterlaceScheme = _magickSetInterlaceSchemePtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>, int)>();

  bool magickSetInterpolateMethod(
    ffi.Pointer<ffi.Void> wand,
    int method,
  ) {
    return _magickSetInterpolateMethod(
      wand,
      method,
    );
  }

  late final _magickSetInterpolateMethodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('magickSetInterpolateMethod');
  late final _magickSetInterpolateMethod = _magickSetInterpolateMethodPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>, int)>();

  bool magickSetOption(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _magickSetOption(
      wand,
      key,
      value,
    );
  }

  late final _magickSetOptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('magickSetOption');
  late final _magickSetOption = _magickSetOptionPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  bool magickSetOrientation(
    ffi.Pointer<ffi.Void> wand,
    int orientation,
  ) {
    return _magickSetOrientation(
      wand,
      orientation,
    );
  }

  late final _magickSetOrientationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('magickSetOrientation');
  late final _magickSetOrientation = _magickSetOrientationPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>, int)>();

  bool magickSetPage(
    ffi.Pointer<ffi.Void> wand,
    int width,
    int height,
    int x,
    int y,
  ) {
    return _magickSetPage(
      wand,
      width,
      height,
      x,
      y,
    );
  }

  late final _magickSetPagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size, ssize_t,
              ssize_t)>>('magickSetPage');
  late final _magickSetPage = _magickSetPagePtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>, int, int, int, int)>();

  bool magickSetPassphrase(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> passphrase,
  ) {
    return _magickSetPassphrase(
      wand,
      passphrase,
    );
  }

  late final _magickSetPassphrasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('magickSetPassphrase');
  late final _magickSetPassphrase = _magickSetPassphrasePtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  bool magickSetPointsize(
    ffi.Pointer<ffi.Void> wand,
    double pointsize,
  ) {
    return _magickSetPointsize(
      wand,
      pointsize,
    );
  }

  late final _magickSetPointsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Void>, ffi.Double)>>('magickSetPointsize');
  late final _magickSetPointsize = _magickSetPointsizePtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>, double)>();

  ffi.Pointer<ffi.IntPtr> magickSetProgressMonitorPort(
    ffi.Pointer<ffi.Void> wand,
    int sendPort,
  ) {
    return _magickSetProgressMonitorPort(
      wand,
      sendPort,
    );
  }

  late final _magickSetProgressMonitorPortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.IntPtr> Function(ffi.Pointer<ffi.Void>,
              ffi.IntPtr)>>('magickSetProgressMonitorPort');
  late final _magickSetProgressMonitorPort =
      _magickSetProgressMonitorPortPtr.asFunction<
          ffi.Pointer<ffi.IntPtr> Function(ffi.Pointer<ffi.Void>, int)>();

  bool magickSetResourceLimit(
    int type,
    int limit,
  ) {
    return _magickSetResourceLimit(
      type,
      limit,
    );
  }

  late final _magickSetResourceLimitPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Int, ffi.UnsignedLongLong)>>(
      'magickSetResourceLimit');
  late final _magickSetResourceLimit =
      _magickSetResourceLimitPtr.asFunction<bool Function(int, int)>();

  bool magickSetResolution(
    ffi.Pointer<ffi.Void> wand,
    double x_resolution,
    double y_resolution,
  ) {
    return _magickSetResolution(
      wand,
      x_resolution,
      y_resolution,
    );
  }

  late final _magickSetResolutionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Double,
              ffi.Double)>>('magickSetResolution');
  late final _magickSetResolution = _magickSetResolutionPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>, double, double)>();

  bool magickSetSamplingFactors(
    ffi.Pointer<ffi.Void> wand,
    int number_factors,
    ffi.Pointer<ffi.Double> sampling_factors,
  ) {
    return _magickSetSamplingFactors(
      wand,
      number_factors,
      sampling_factors,
    );
  }

  late final _magickSetSamplingFactorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Double>)>>('magickSetSamplingFactors');
  late final _magickSetSamplingFactors =
      _magickSetSamplingFactorsPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Double>)>();

  void magickSetSeed(
    int seed,
  ) {
    return _magickSetSeed(
      seed,
    );
  }

  late final _magickSetSeedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedLong)>>(
          'magickSetSeed');
  late final _magickSetSeed =
      _magickSetSeedPtr.asFunction<void Function(int)>();

  bool magickSetSecurityPolicy(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> policy,
  ) {
    return _magickSetSecurityPolicy(
      wand,
      policy,
    );
  }

  late final _magickSetSecurityPolicyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('magickSetSecurityPolicy');
  late final _magickSetSecurityPolicy = _magickSetSecurityPolicyPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  bool magickSetSize(
    ffi.Pointer<ffi.Void> wand,
    int columns,
    int rows,
  ) {
    return _magickSetSize(
      wand,
      columns,
      rows,
    );
  }

  late final _magickSetSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('magickSetSize');
  late final _magickSetSize = _magickSetSizePtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>, int, int)>();

  bool magickSetSizeOffset(
    ffi.Pointer<ffi.Void> wand,
    int columns,
    int rows,
    int offset,
  ) {
    return _magickSetSizeOffset(
      wand,
      columns,
      rows,
      offset,
    );
  }

  late final _magickSetSizeOffsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ssize_t)>>('magickSetSizeOffset');
  late final _magickSetSizeOffset = _magickSetSizeOffsetPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>, int, int, int)>();

  bool magickSetType(
    ffi.Pointer<ffi.Void> wand,
    int image_type,
  ) {
    return _magickSetType(
      wand,
      image_type,
    );
  }

  late final _magickSetTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Int)>>('magickSetType');
  late final _magickSetType =
      _magickSetTypePtr.asFunction<bool Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> getImageFromMagickWand(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _getImageFromMagickWand(
      wand,
    );
  }

  late final _getImageFromMagickWandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('getImageFromMagickWand');
  late final _getImageFromMagickWand = _getImageFromMagickWandPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  bool magickAdaptiveBlurImage(
    ffi.Pointer<ffi.Void> wand,
    double radius,
    double sigma,
  ) {
    return _magickAdaptiveBlurImage(
      wand,
      radius,
      sigma,
    );
  }

  late final _magickAdaptiveBlurImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Double,
              ffi.Double)>>('magickAdaptiveBlurImage');
  late final _magickAdaptiveBlurImage = _magickAdaptiveBlurImagePtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>, double, double)>();

  bool magickAdaptiveResizeImage(
    ffi.Pointer<ffi.Void> wand,
    int columns,
    int rows,
  ) {
    return _magickAdaptiveResizeImage(
      wand,
      columns,
      rows,
    );
  }

  late final _magickAdaptiveResizeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Size)>>('magickAdaptiveResizeImage');
  late final _magickAdaptiveResizeImage = _magickAdaptiveResizeImagePtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>, int, int)>();

  bool magickAdaptiveSharpenImage(
    ffi.Pointer<ffi.Void> wand,
    double radius,
    double sigma,
  ) {
    return _magickAdaptiveSharpenImage(
      wand,
      radius,
      sigma,
    );
  }

  late final _magickAdaptiveSharpenImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Double,
              ffi.Double)>>('magickAdaptiveSharpenImage');
  late final _magickAdaptiveSharpenImage = _magickAdaptiveSharpenImagePtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>, double, double)>();

  bool magickAdaptiveThresholdImage(
    ffi.Pointer<ffi.Void> wand,
    int width,
    int height,
    double bias,
  ) {
    return _magickAdaptiveThresholdImage(
      wand,
      width,
      height,
      bias,
    );
  }

  late final _magickAdaptiveThresholdImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Double)>>('magickAdaptiveThresholdImage');
  late final _magickAdaptiveThresholdImage = _magickAdaptiveThresholdImagePtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>, int, int, double)>();

  bool magickAddImage(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Void> add_wand,
  ) {
    return _magickAddImage(
      wand,
      add_wand,
    );
  }

  late final _magickAddImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>('magickAddImage');
  late final _magickAddImage = _magickAddImagePtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  bool magickAddNoiseImage(
    ffi.Pointer<ffi.Void> wand,
    int noise_type,
    double attenuate,
  ) {
    return _magickAddNoiseImage(
      wand,
      noise_type,
      attenuate,
    );
  }

  late final _magickAddNoiseImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Double)>>('magickAddNoiseImage');
  late final _magickAddNoiseImage = _magickAddNoiseImagePtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>, int, double)>();

  bool magickAffineTransformImage(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Void> drawing_wand,
  ) {
    return _magickAffineTransformImage(
      wand,
      drawing_wand,
    );
  }

  late final _magickAffineTransformImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('magickAffineTransformImage');
  late final _magickAffineTransformImage =
      _magickAffineTransformImagePtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  bool magickAnnotateImage(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Void> drawing_wand,
    double x,
    double y,
    double angle,
    ffi.Pointer<ffi.Char> text,
  ) {
    return _magickAnnotateImage(
      wand,
      drawing_wand,
      x,
      y,
      angle,
      text,
    );
  }

  late final _magickAnnotateImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Char>)>>('magickAnnotateImage');
  late final _magickAnnotateImage = _magickAnnotateImagePtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, double,
          double, double, ffi.Pointer<ffi.Char>)>();

  bool magickAnimateImages(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> server_name,
  ) {
    return _magickAnimateImages(
      wand,
      server_name,
    );
  }

  late final _magickAnimateImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('magickAnimateImages');
  late final _magickAnimateImages = _magickAnimateImagesPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> magickAppendImages(
    ffi.Pointer<ffi.Void> wand,
    bool stack,
  ) {
    return _magickAppendImages(
      wand,
      stack,
    );
  }

  late final _magickAppendImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Bool)>>('magickAppendImages');
  late final _magickAppendImages = _magickAppendImagesPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, bool)>();

  bool magickAutoGammaImage(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickAutoGammaImage(
      wand,
    );
  }

  late final _magickAutoGammaImagePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'magickAutoGammaImage');
  late final _magickAutoGammaImage = _magickAutoGammaImagePtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>)>();

  bool magickAutoLevelImage(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickAutoLevelImage(
      wand,
    );
  }

  late final _magickAutoLevelImagePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'magickAutoLevelImage');
  late final _magickAutoLevelImage = _magickAutoLevelImagePtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>)>();

  bool magickAutoOrientImage(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickAutoOrientImage(
      wand,
    );
  }

  late final _magickAutoOrientImagePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'magickAutoOrientImage');
  late final _magickAutoOrientImage = _magickAutoOrientImagePtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>)>();

  bool magickAutoThresholdImage(
    ffi.Pointer<ffi.Void> wand,
    int method,
  ) {
    return _magickAutoThresholdImage(
      wand,
      method,
    );
  }

  late final _magickAutoThresholdImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('magickAutoThresholdImage');
  late final _magickAutoThresholdImage = _magickAutoThresholdImagePtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>, int)>();

  bool magickBilateralBlurImage(
    ffi.Pointer<ffi.Void> wand,
    double radius,
    double sigma,
    double intensity_sigma,
    double spatial_sigma,
  ) {
    return _magickBilateralBlurImage(
      wand,
      radius,
      sigma,
      intensity_sigma,
      spatial_sigma,
    );
  }

  late final _magickBilateralBlurImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Double, ffi.Double,
              ffi.Double, ffi.Double)>>('magickBilateralBlurImage');
  late final _magickBilateralBlurImage =
      _magickBilateralBlurImagePtr.asFunction<
          bool Function(
              ffi.Pointer<ffi.Void>, double, double, double, double)>();

  bool magickBlackThresholdImage(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Void> threshold_wand,
  ) {
    return _magickBlackThresholdImage(
      wand,
      threshold_wand,
    );
  }

  late final _magickBlackThresholdImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('magickBlackThresholdImage');
  late final _magickBlackThresholdImage =
      _magickBlackThresholdImagePtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  bool magickBlueShiftImage(
    ffi.Pointer<ffi.Void> wand,
    double factor,
  ) {
    return _magickBlueShiftImage(
      wand,
      factor,
    );
  }

  late final _magickBlueShiftImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Void>, ffi.Double)>>('magickBlueShiftImage');
  late final _magickBlueShiftImage = _magickBlueShiftImagePtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>, double)>();

  bool magickBlurImage(
    ffi.Pointer<ffi.Void> wand,
    double radius,
    double sigma,
  ) {
    return _magickBlurImage(
      wand,
      radius,
      sigma,
    );
  }

  late final _magickBlurImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Double,
              ffi.Double)>>('magickBlurImage');
  late final _magickBlurImage = _magickBlurImagePtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>, double, double)>();

  bool magickBorderImage(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Void> bordercolor_wand,
    int width,
    int height,
    int compose,
  ) {
    return _magickBorderImage(
      wand,
      bordercolor_wand,
      width,
      height,
      compose,
    );
  }

  late final _magickBorderImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size, ffi.Size, ffi.Int)>>('magickBorderImage');
  late final _magickBorderImage = _magickBorderImagePtr.asFunction<
      bool Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int, int)>();

  bool magickBrightnessContrastImage(
    ffi.Pointer<ffi.Void> wand,
    double brightness,
    double contrast,
  ) {
    return _magickBrightnessContrastImage(
      wand,
      brightness,
      contrast,
    );
  }

  late final _magickBrightnessContrastImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Double,
              ffi.Double)>>('magickBrightnessContrastImage');
  late final _magickBrightnessContrastImage = _magickBrightnessContrastImagePtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>, double, double)>();

  bool magickCannyEdgeImage(
    ffi.Pointer<ffi.Void> wand,
    double radius,
    double sigma,
    double lower_percent,
    double upper_percent,
  ) {
    return _magickCannyEdgeImage(
      wand,
      radius,
      sigma,
      lower_percent,
      upper_percent,
    );
  }

  late final _magickCannyEdgeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Double, ffi.Double,
              ffi.Double, ffi.Double)>>('magickCannyEdgeImage');
  late final _magickCannyEdgeImage = _magickCannyEdgeImagePtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, double, double, double, double)>();

  ffi.Pointer<ffi.Void> magickChannelFxImage(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> expression,
  ) {
    return _magickChannelFxImage(
      wand,
      expression,
    );
  }

  late final _magickChannelFxImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('magickChannelFxImage');
  late final _magickChannelFxImage = _magickChannelFxImagePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  bool magickCharcoalImage(
    ffi.Pointer<ffi.Void> wand,
    double radius,
    double sigma,
  ) {
    return _magickCharcoalImage(
      wand,
      radius,
      sigma,
    );
  }

  late final _magickCharcoalImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Double,
              ffi.Double)>>('magickCharcoalImage');
  late final _magickCharcoalImage = _magickCharcoalImagePtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>, double, double)>();

  bool magickChopImage(
    ffi.Pointer<ffi.Void> wand,
    int width,
    int height,
    int x,
    int y,
  ) {
    return _magickChopImage(
      wand,
      width,
      height,
      x,
      y,
    );
  }

  late final _magickChopImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size, ssize_t,
              ssize_t)>>('magickChopImage');
  late final _magickChopImage = _magickChopImagePtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>, int, int, int, int)>();

  bool magickCLAHEImage(
    ffi.Pointer<ffi.Void> wand,
    int width,
    int height,
    double number_bins,
    double clip_limit,
  ) {
    return _magickCLAHEImage(
      wand,
      width,
      height,
      number_bins,
      clip_limit,
    );
  }

  late final _magickCLAHEImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Double, ffi.Double)>>('magickCLAHEImage');
  late final _magickCLAHEImage = _magickCLAHEImagePtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, int, int, double, double)>();

  bool magickClampImage(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickClampImage(
      wand,
    );
  }

  late final _magickClampImagePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'magickClampImage');
  late final _magickClampImage =
      _magickClampImagePtr.asFunction<bool Function(ffi.Pointer<ffi.Void>)>();

  bool magickClipImage(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickClipImage(
      wand,
    );
  }

  late final _magickClipImagePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'magickClipImage');
  late final _magickClipImage =
      _magickClipImagePtr.asFunction<bool Function(ffi.Pointer<ffi.Void>)>();

  bool magickClipImagePath(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> pathname,
    bool inside,
  ) {
    return _magickClipImagePath(
      wand,
      pathname,
      inside,
    );
  }

  late final _magickClipImagePathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Bool)>>('magickClipImagePath');
  late final _magickClipImagePath = _magickClipImagePathPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, bool)>();

  bool magickClutImage(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Void> clut_wand,
    int method,
  ) {
    return _magickClutImage(
      wand,
      clut_wand,
      method,
    );
  }

  late final _magickClutImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('magickClutImage');
  late final _magickClutImage = _magickClutImagePtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> magickCoalesceImages(
    ffi.Pointer<ffi.Void> wand,
  ) {
    return _magickCoalesceImages(
      wand,
    );
  }

  late final _magickCoalesceImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('magickCoalesceImages');
  late final _magickCoalesceImages = _magickCoalesceImagesPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  bool magickColorDecisionListImage(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> color_correction_collection,
  ) {
    return _magickColorDecisionListImage(
      wand,
      color_correction_collection,
    );
  }

  late final _magickColorDecisionListImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('magickColorDecisionListImage');
  late final _magickColorDecisionListImage =
      _magickColorDecisionListImagePtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  bool magickColorizeImage(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Void> colorize,
    ffi.Pointer<ffi.Void> blend,
  ) {
    return _magickColorizeImage(
      wand,
      colorize,
      blend,
    );
  }

  late final _magickColorizeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('magickColorizeImage');
  late final _magickColorizeImage = _magickColorizeImagePtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>)>();

  bool magickColorMatrixImage(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Void> color_matrix,
  ) {
    return _magickColorMatrixImage(
      wand,
      color_matrix,
    );
  }

  late final _magickColorMatrixImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('magickColorMatrixImage');
  late final _magickColorMatrixImage = _magickColorMatrixImagePtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  bool magickColorThresholdImage(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Void> start_color,
    ffi.Pointer<ffi.Void> stop_color,
  ) {
    return _magickColorThresholdImage(
      wand,
      start_color,
      stop_color,
    );
  }

  late final _magickColorThresholdImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('magickColorThresholdImage');
  late final _magickColorThresholdImage =
      _magickColorThresholdImagePtr.asFunction<
          bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> magickCombineImages(
    ffi.Pointer<ffi.Void> wand,
    int colorspace,
  ) {
    return _magickCombineImages(
      wand,
      colorspace,
    );
  }

  late final _magickCombineImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('magickCombineImages');
  late final _magickCombineImages = _magickCombineImagesPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  bool magickCommentImage(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> comment,
  ) {
    return _magickCommentImage(
      wand,
      comment,
    );
  }

  late final _magickCommentImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('magickCommentImage');
  late final _magickCommentImage = _magickCommentImagePtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> magickCompareImagesLayers(
    ffi.Pointer<ffi.Void> wand,
    int method,
  ) {
    return _magickCompareImagesLayers(
      wand,
      method,
    );
  }

  late final _magickCompareImagesLayersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('magickCompareImagesLayers');
  late final _magickCompareImagesLayers = _magickCompareImagesLayersPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> magickCompareImages(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Void> reference,
    int metric,
    ffi.Pointer<ffi.Double> distortion,
  ) {
    return _magickCompareImages(
      wand,
      reference,
      metric,
      distortion,
    );
  }

  late final _magickCompareImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Pointer<ffi.Double>)>>('magickCompareImages');
  late final _magickCompareImages = _magickCompareImagesPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<ffi.Void> magickComplexImages(
    ffi.Pointer<ffi.Void> wand,
    int op,
  ) {
    return _magickComplexImages(
      wand,
      op,
    );
  }

  late final _magickComplexImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('magickComplexImages');
  late final _magickComplexImages = _magickComplexImagesPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  bool magickCompositeImage(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Void> source_wand,
    int compose,
    bool clip_to_self,
    int x,
    int y,
  ) {
    return _magickCompositeImage(
      wand,
      source_wand,
      compose,
      clip_to_self,
      x,
      y,
    );
  }

  late final _magickCompositeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int, ffi.Bool, ssize_t, ssize_t)>>('magickCompositeImage');
  late final _magickCompositeImage = _magickCompositeImagePtr.asFunction<
      bool Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, bool, int, int)>();

  bool magickCompositeImageGravity(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Void> source_wand,
    int compose,
    int gravity,
  ) {
    return _magickCompositeImageGravity(
      wand,
      source_wand,
      compose,
      gravity,
    );
  }

  late final _magickCompositeImageGravityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int, ffi.Int)>>('magickCompositeImageGravity');
  late final _magickCompositeImageGravity =
      _magickCompositeImageGravityPtr.asFunction<
          bool Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  bool magickCompositeLayers(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Void> source_wand,
    int compose,
    int x,
    int y,
  ) {
    return _magickCompositeLayers(
      wand,
      source_wand,
      compose,
      x,
      y,
    );
  }

  late final _magickCompositeLayersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int, ssize_t, ssize_t)>>('magickCompositeLayers');
  late final _magickCompositeLayers = _magickCompositeLayersPtr.asFunction<
      bool Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int, int)>();

  /// TODO: complete adding the other methods
  bool magickReadImage(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _magickReadImage(
      wand,
      filename,
    );
  }

  late final _magickReadImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('magickReadImage');
  late final _magickReadImage = _magickReadImagePtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  bool magickWriteImage(
    ffi.Pointer<ffi.Void> wand,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _magickWriteImage(
      wand,
      filename,
    );
  }

  late final _magickWriteImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('magickWriteImage');
  late final _magickWriteImage = _magickWriteImagePtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();
}

typedef ssize_t = ffi.LongLong;
